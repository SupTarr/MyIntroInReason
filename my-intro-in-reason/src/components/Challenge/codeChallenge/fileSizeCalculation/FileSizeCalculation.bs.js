// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_string from "rescript/lib/es6/js_string.js";

import '../../../../input.css'
;

var files = "my.song.mp3 11b\r\ngreatSong.flac 1000b\r\nnot3.txt 5b\r\nvideo.mp4 200b\r\ngame.exe 100b\r\nmov!e.mkv 10000b";

var fileSizeCalculation = (function (fileList) {
    const lists = fileList.split("\n");
    const listName = [];
    const listSize = [];
    lists.forEach((list) => {
      const temp = list.split(" ");
      listName.push(temp[0]);
      listSize.push(temp[1]);
    });
    const resultType = [];
    const resultSize = [];
    for (let i = 0; i < listName.length; i++) {
      let type = listName[i].split(".");
      type = type[type.length - 1];
      let size = listSize[i].split("b");
      resultSize.push(size[0]);
      if (type === "mp3" || type === "aac" || type === "flac") {
        resultType.push("music");
      } else if (type === "jpg" || type === "bmp" || type === "gif") {
        resultType.push("images");
      } else if (type === "mp4" || type === "avi" || type === "mkv") {
        resultType.push("movies");
      } else {
        resultType.push("other");
      }
    }
    let musicSize = 0;
    let imagesSize = 0;
    let moviesSize = 0;
    let otherSize = 0;
    for (let i = 0; i < listName.length; i++) {
      if (resultType[i] === "music") {
        musicSize += parseInt(listSize[i]);
      } else if (resultType[i] === "images") {
        imagesSize += parseInt(listSize[i]);
      } else if (resultType[i] === "movies") {
        moviesSize += parseInt(listSize[i]);
      } else {
        otherSize += parseInt(listSize[i]);
      }
    }
    let result = [];
    result.push("music " + musicSize + "b");
    result.push("images " + imagesSize + "b");
    result.push("movies " + moviesSize + "b");
    result.push("other " + otherSize + "b");
    return result;
  });

function FileSizeCalculation(Props) {
  var match = React.useState(function () {
        return 0;
      });
  var setFizzBuzzStop = match[1];
  var fizzBuzzStop = match[0];
  var handleFizzBuzzStopChange = function ($$event) {
    var value = $$event.currentTarget.value;
    if (Js_string.charAt(0, value) === "0") {
      return Curry._1(setFizzBuzzStop, (function (param) {
                    return 0;
                  }));
    } else {
      return Curry._1(setFizzBuzzStop, (function (param) {
                    return value;
                  }));
    }
  };
  var fileSizeCalitems = fileSizeCalculation(files).map(function (file, index) {
        return React.createElement("li", {
                    key: String(index)
                  }, file);
      });
  return React.createElement("section", undefined, React.createElement("h2", {
                  className: "text-center text-xl font-bold mt-10 mb-2"
                }, "Fizz-Buzz Challenge"), React.createElement("div", {
                  className: "flex flex-wrap max-w-[1000px] mx-auto justify-around"
                }, React.createElement("div", {
                      className: "mx-5 mb-3"
                    }, React.createElement("h3", {
                          className: "max-w-[250px] mb-3"
                        }, "The task of Fizz-Buzz is: Print integers one-to-N, but print “Fizz” if an integer is divisible by three, “Buzz” if an integer is divisible by five, and “FizzBuzz” if an integer is divisible by both three and five."), React.createElement("p", undefined, "Input where you want to stop"), React.createElement("input", {
                          className: "max-w-[100px]",
                          id: "fizzBuzzInput",
                          min: "0",
                          type: "number",
                          value: String(fizzBuzzStop),
                          onChange: handleFizzBuzzStopChange
                        })), React.createElement("pre", {
                      className: "transition max-w-[500px] h-[300px] mx-5 mb-3 p-5 overflow-y-scroll bg-red-300 rounded-xl drop-shadow-lg hover:drop-shadow-2xl"
                    }, React.createElement("code", undefined, "function (fileList) {\r\n  const lists = fileList.split(\"\\n\");\r\n  const listName = [];\r\n  const listSize = [];\r\n  lists.forEach((list) => {\r\n    const temp = list.split(\" \");\r\n    listName.push(temp[0]);\r\n    listSize.push(temp[1]);\r\n  });\r\n  const resultType = [];\r\n  const resultSize = [];\r\n  for (let i = 0; i < listName.length; i++) {\r\n    let type = listName[i].split(\".\");\r\n    type = type[type.length - 1];\r\n    let size = listSize[i].split(\"b\");\r\n    resultSize.push(size[0]);\r\n    if (type === \"mp3\" || type === \"aac\" || type === \"flac\") {\r\n      resultType.push(\"music\");\r\n    } else if (type === \"jpg\" || type === \"bmp\" || type === \"gif\") {\r\n      resultType.push(\"images\");\r\n    } else if (type === \"mp4\" || type === \"avi\" || type === \"mkv\") {\r\n      resultType.push(\"movies\");\r\n    } else {\r\n      resultType.push(\"other\");\r\n    }\r\n  }\r\n  let musicSize = 0;\r\n  let imagesSize = 0;\r\n  let moviesSize = 0;\r\n  let otherSize = 0;\r\n  for (let i = 0; i < listName.length; i++) {\r\n    if (resultType[i] === \"music\") {\r\n      musicSize += parseInt(listSize[i]);\r\n    } else if (resultType[i] === \"images\") {\r\n      imagesSize += parseInt(listSize[i]);\r\n    } else if (resultType[i] === \"movies\") {\r\n      moviesSize += parseInt(listSize[i]);\r\n    } else {\r\n      otherSize += parseInt(listSize[i]);\r\n    }\r\n  }\r\n  let result = [];\r\n  result.push(\"music \" + musicSize + \"b\");\r\n  result.push(\"images \" + imagesSize + \"b\");\r\n  result.push(\"movies \" + moviesSize + \"b\");\r\n  result.push(\"other \" + otherSize + \"b\");\r\n  return result;\r\n}\r\n")), fizzBuzzStop.toString().length !== 0 && fizzBuzzStop !== 0 ? React.createElement("div", {
                        className: "transition min-w-[150px] h-[300px] mx-5 mb-3 p-5 bg-red-200 rounded-xl overflow-y-scroll drop-shadow-lg hover:drop-shadow-2xl"
                      }, fileSizeCalitems) : React.createElement(React.Fragment, undefined)));
}

var make = FileSizeCalculation;

export {
  files ,
  fileSizeCalculation ,
  make ,
}
/*  Not a pure module */
